import { HttpClient } from '@angular/common/http';
import { ChangeDetectorRef, Component, OnInit } from '@angular/core';
import { AbstractControl, FormBuilder, FormGroup, MaxValidator, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';
import { NgbModal, NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';
import { apiResultFormat } from 'src/app/core/core.index';
import { AuthService } from 'src/app/core/services/auth/auth.service';
import { CompanyService } from 'src/app/core/services/company/company.service';
import { DataService } from 'src/app/core/services/data/data.service';
export const passwordStrengthValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {
  const password = control.value;
  if (!password) {
    return null;
  }

  const strongPasswordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{6,}$/;

  return strongPasswordRegex.test(password) ? null : { passwordStrength: true };
};
@Component({
  selector: 'app-add-user-modal',
  templateUrl: './add-user-modal.component.html',
  styleUrl: './add-user-modal.component.scss'
})
export class AddUserModalComponent implements OnInit {

  addUserForm!: FormGroup;
  data: any;
  isEdit: boolean = false;
  isBangkok: boolean = false;
  isDisabled: boolean = false;
  isView: boolean = false;
  isNanoStoreBkkBranch: boolean = false;
  isNanoStore: boolean = false;
  isNanoVip: boolean = false;
  isNanoEntertainment: boolean = false;
  companyList: any[] = [];
  positionList: any[] = [];
  positionListNanoStore: any[] = [];
  positionListNanoVipList: any[] = [];
  positionListNanoEntertainmentSugarDaddy: any[] = [];
  positionListNanoEntertainmentHu: any[] = [];
  storeBranchPhuketList: any[] = [];
  storeBranchBangkokList: any[] = [];
  entertainmentBranchList: any[] = [];
  locationList: any[] = [];
  branchList: any[] = [];
  selectedCompany: string = '';
  selectedLocation: any;
  selectedBranch: string = '';
  selectedPosition: string = '';

  constructor(
    private formBuilder: FormBuilder,
    private modalService: NgbModal,
    private ngbActiveModal: NgbActiveModal,
    private authService: AuthService,
    private companyService: CompanyService,
    private http: HttpClient,
    private dataService: DataService,
    private cdr: ChangeDetectorRef
  ) {
    // Load position data from JSON files


  }


  ngOnInit(): void {

    this.getCompanyList();
    this.fetchLocation();
    this.fetchNanoVipPosition();
    this.fetchNanoStorePosition();
    this.fetchNanoEntertainmentSugarDaddyPosition();
    this.fetchNanoEntertainmentHuPosition();
    this.fetchStoreBranchPhuket();
    this.fetchStoreBranchBangkok();
    this.fetchEntertainmentBranch();

    this.loadForm(this.data);


    if (this.isEdit) {
      // Disable email and password fields in edit mode
      this.addUserForm.get('email')?.disable();
      this.addUserForm.get('password')?.disable();

      this.addUserForm.get('password')?.updateValueAndValidity();

    }
    if (this.isView) {
      this.isDisabled = true;
      this.addUserForm.disable();
    }

  }

  fetchNanoVipPosition(): void {
    this.dataService.getNanoVipPosition().subscribe(
      (data: apiResultFormat) => {
        this.positionListNanoVipList = data.data;

      },
      (error) => {
        console.error("Error fetching Nano VIP data", error);
      }
    );
  }
  fetchNanoStorePosition(): void {
    this.dataService.getNanoStorePosition().subscribe(
      (data: apiResultFormat) => {
        this.positionListNanoStore = data.data;

      },
      (error) => {
        console.error("Error fetching Nano Store data", error);
      }
    );
  }
  fetchNanoEntertainmentSugarDaddyPosition(): void {
    this.dataService.getNanoEntertainmentSugarDaddyPosition().subscribe(
      (data: apiResultFormat) => {
        this.positionListNanoEntertainmentSugarDaddy = data.data;

      },
      (error) => {
        console.error("Error fetching Nano Entertainment Sugar Daddy data", error);
      }
    );
  }
  fetchNanoEntertainmentHuPosition(): void {
    this.dataService.getNanoEntertainmentHuPosition().subscribe(
      (data: apiResultFormat) => {
        this.positionListNanoEntertainmentHu = data.data;

      },
      (error) => {
        console.error("Error fetching Nano Entertainment Hu data", error);
      }
    );
  }
  fetchLocation(): void {
    this.dataService.getLocation().subscribe(
      (data: apiResultFormat) => {
        this.locationList = data.data;
      },
      (error) => {
        console.error("Error fetching location data", error);
      }
    );
  }


  fetchStoreBranchPhuket(): void {
    this.dataService.getStoreBranchPhuket().subscribe(
      (data: apiResultFormat) => {
        this.storeBranchPhuketList = data.data;
      },
      (error) => {
        console.error("Error fetching store branch phuket data", error);
      }
    );
  }
  fetchStoreBranchBangkok(): void {
    this.dataService.getStoreBranchBangkok().subscribe(
      (data: apiResultFormat) => {
        this.storeBranchBangkokList = data.data;
      },
      (error) => {
        console.error("Error fetching store branch bangkok data", error);
      }
    );
  }
  fetchEntertainmentBranch(): void {
    this.dataService.getEntertainmentBranch().subscribe(
      (data: apiResultFormat) => {
        this.entertainmentBranchList = data.data;
      },
      (error) => {
        console.error("Error fetching entertainment branch data", error);
      }
    );
  }
  loadForm(data?: any) {
    console.log("loadForm", data);


    this.addUserForm = this.formBuilder.group({
      uid: [data ? data.uid : ''],
      firstName: [data ? data.firstName : '', Validators.required],
      lastName: [data ? data.lastName : '', Validators.required],
      email: [data ? data.email : '',
      [Validators.required, Validators.email],
      [this.authService.emailExistsValidator1()],
      { updateOn: 'change' } // 'change' will validate on every keystroke
      ],
      // email: [data? data.email : '', Validators.required, this.authService.emailExistsValidator(), Validators.email],
      phone: [data ? data.phone : '', Validators.required],
      password: [data ? data.password : '', [Validators.required, passwordStrengthValidator]],

      company: [data ? data.company : '', Validators.required],
      companyName: [data ? data.companyName : ''],
      branch: [data ? data.branch : '',],
      branchName: [data ? data.branchName : ''],
      location: [data ? data.location : '', Validators.required],
      locationName: [data ? data.locationName : ''],
      position: [data ? data.position : '', Validators.required],
      positionName: [data ? data.positionName : ''],
      joinDate: [data ? data.joinDate ? data.joinDate : new Date().toISOString() : ''],
      role: [data ? data.role : '', Validators.required],
      createdDate: [data ? data.createdDate ? data.createdDate : new Date().toISOString() : new Date().toISOString()],
      updatedDate: [new Date().toISOString()],


    })
    this.selectedLocation = data?.location;
    this.selectedCompany = data?.company;
    if(this.selectedLocation){
      console.log("this.selectedLocation", this.selectedLocation);
      this.fetchLocation();
      this.onLocationChange(this.selectedLocation);

    }
    this.selectedBranch = data?.branch;
    if(this.selectedBranch){

      this.onBranchChange(this.selectedBranch);
    }
    this.selectedPosition = data?.position;
    console.log("poslition list", this.positionList);


  }

  getCompanyList() {
    this.dataService.getCompanies().subscribe(
      (data: apiResultFormat) => {
        this.companyList = data.data;

      },
      (error) => {
        console.error("Error fetching company list", error);
      }
    );
  }


  onLocationChange(event: any) {
    console.log("onLocationChange", this.locationList);
    this.selectedLocation = event;
    this.dataService.getLocation().subscribe(
      (data: apiResultFormat) => {
        this.locationList = data.data;
        this.addUserForm.get('location')?.setValue(this.selectedLocation);
        const name = this.locationList.find((location: any) => location.id === event);
        console.log("name", name);
        this.addUserForm.get('locationName')?.setValue(name.name);

        this.branchList = [];
        this.positionList = [];
        this.selectedBranch = '';
        // this.selectedPosition = '';
        console.log("selectedCompany", this.selectedCompany);
        console.log("selectedLocation", this.selectedLocation);



        if ((this.selectedLocation === 'L-001' || this.selectedLocation === 'L-002') && this.selectedCompany === 'C-001') {
          this.positionList = this.positionListNanoVipList;
          console.log("this.positionList", this.positionList);
        }
        else if (this.selectedLocation === 'L-001' && this.selectedCompany === 'C-002') {

          this.positionList = this.positionListNanoStore;

          this.branchList = this.storeBranchPhuketList;
          console.log("this.branchList", this.storeBranchPhuketList);

        }
        else if (this.selectedLocation === 'L-002' && this.selectedCompany === 'C-002') {
          this.positionList = this.positionListNanoStore;
          this.branchList = this.storeBranchBangkokList;
        }
        else if (this.selectedLocation === 'L-001' && this.selectedCompany === 'C-003') {

          this.branchList = this.entertainmentBranchList;
        }

      },
      (error) => {
        console.error("Error fetching location data", error);
      }
    );


  }

  onBranchChange(event: any) {

    this.selectedBranch = event;

    const name = this.branchList.find((branch: any) => branch.id === event);
    this.addUserForm.get('branchName')?.setValue(name.name);
    this.positionList = [];
    this.selectedPosition = '';
    this.addUserForm.get('position')?.setValue(this.selectedPosition);
    if (this.selectedCompany === 'C-002' && (this.selectedLocation === 'L-001' || this.selectedLocation === 'L-002')) {
      this.positionList = this.positionListNanoStore;
    }
    else if (this.selectedCompany === 'C-003' && this.selectedLocation === 'L-001' && this.selectedBranch === 'PE-001') {
      this.positionList = this.positionListNanoEntertainmentSugarDaddy;
    }
    else if (this.selectedCompany === 'C-003' && this.selectedLocation === 'L-001' && this.selectedBranch === 'PE-002') {
      this.positionList = this.positionListNanoEntertainmentHu;
    }
    else {
      this.positionList = this.positionList;
    }

  }

  onPositionChange(event: any) {
    this.selectedPosition = event;
    this.addUserForm.get('position')?.setValue(this.selectedPosition);
    const name = this.positionList.find((position: any) => position.id === event);
    this.addUserForm.get('positionName')?.setValue(name.name);
  }


  onCompanyChange(event: any) {

    this.selectedCompany = event;
    this.addUserForm.get('companyName')?.setValue(event.name);
    const name = this.companyList.find((company: any) => company.id === event);
    this.addUserForm.get('companyName')?.setValue(name.name);


    this.branchList = [];
    this.positionList = [];
    this.selectedLocation = '';
    this.locationList = [];
    this.fetchLocation();
    this.cdr.detectChanges();
    if (this.selectedCompany === 'C-001') {

      this.isNanoVip = true;
      this.isNanoStore = false;
      this.isNanoEntertainment = false;
    }
    else if (this.selectedCompany === 'C-002') {
      this.isNanoVip = false;
      this.isNanoStore = true;
      this.isNanoEntertainment = false;
    }
    else {
      this.isNanoVip = false;
      this.isNanoStore = false;
      this.isNanoEntertainment = true;
    }

  }



  closeModal() {
    this.ngbActiveModal.dismiss();
  }
  submitAddUser() {
    console.log("submitAddUser", this.addUserForm.valid);
    const isEmailExists = this.authService.emailExistsValidator(this.addUserForm.getRawValue().email).subscribe((res: any) => {
      console.log("isEmailExists", res);
    });



    if (this.addUserForm.valid) {
      this.ngbActiveModal.close({ data: { ...this.addUserForm.value, email: this.addUserForm.getRawValue().email, status: 'enabled' } });
    }
    else {
      this.addUserForm.markAllAsTouched();
    }

  }
  disabledUser() {
    this.ngbActiveModal.dismiss();
  }

}
